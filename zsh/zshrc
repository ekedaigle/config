# Detect the current platform
platform='unknown'
unamestr=$(uname)
if [[ "$unamestr" == 'Linux' ]]; then
	platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
	platform='darwin'
fi

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh
ZSH_LOCAL=$HOME/.zshrc-local
ZSH_CUSTOM=$HOME/config/zsh

ZSH_THEME="custom"
DISABLE_AUTO_UPDATE="true"
DISABLE_AUTO_TITLE="true"
plugins=(git zsh-iterm-touchbar)
source $ZSH/oh-my-zsh.sh

unsetopt correct_all
unsetopt auto_cd

function cfiles {
    find -regextype posix-egrep -regex '.*\.h$|.*\.hpp$|.*\.c$|.*\.cpp|.*\.cc$'
}

function cgrep {
    2>/dev/null grep -n "$@" $(cfiles) | nl | grep "$@"
}

function update-env {
    if [[ -n $TMUX ]]; then
        export DISPLAY=$(tmux showenv | grep \^DISPLAY | cut -d = -f 2)
    fi
}

function build-current-dir {
    echo '\e]50;SetMark\a'
    export ARGS=("$@")

    if [ -e .buildrc ]; then
        source .buildrc

        if [[ "$@" == "clean" ]]; then
            if [ "$BUILD_WARN_CLEAN" -eq 1 ]; then
                echo -n "Clean build? (y/n) "
                read answer
                if [ "$answer" != "y" ]; then
                    return
                fi
            fi
        fi

        if [[ "$@" == "" ]]; then
            export ARGS=($BUILD_DEFAULTS)
        fi
    fi

    if [ -e CMakeLists.txt ] && [ -d build ]; then
        cd build
        build-current-dir $ARGS
        cd ..
    elif [ -e Makefile ]; then
        make $ARGS
    elif [ -e build.ninja ]; then
        ninja $ARGS
    elif [ -e SConstruct ]; then
        scons $ARGS
    elif [ -e Cargo.toml ]; then
        cargo build $ARGS
    elif [ -d build ]; then
        cd build
        build-current-dir $ARGS
        cd ..
    else
        echo "Build system not found" >&2
    fi
}

function tmux-attach {
    if [[ $# == 0 ]]; then
        tmux list-sessions
        return
    fi

    if (( ${+LC_TMUX_CC} )); then
        tmux -CC attach -d -t $@
    else
        tmux attach -d -t $@
    fi
}

function tmux-new {
    if [[ $# == 0 ]]; then
        echo 'Please provide a session name'
        return
    fi

    if (( ${+LC_TMUX_CC} )); then
        tmux -CC new-session -s $@
    else
        tmux new-session -s $@
    fi
}

function objdump-platform {
    ARCH=$(readelf -h $1 | grep Machine | awk '{print $2}')

    if [ "$ARCH" = "PowerPC" ]; then
        OBJDUMP=/usr/powerpc-405-linux-uclibc/bin/powerpc-405-linux-uclibc-objdump
    elif [ "$ARCH" = "Sparc" ]; then
        OBJDUMP=sparc-elf-objdump
    elif [ "$ARCH" = "ARM" ]; then
        OBJDUMP=arm-unknown-linux-gnueabi-objdump
    else
        OBJDUMP=objdump
    fi

    $OBJDUMP -S $@ | vi -
}

export EDITOR=nvim
export FZF_DEFAULT_COMMAND='ag -l --nocolor --hidden -g ""'

export PATH=/usr/lib/ccache:~/bin:$PATH
export LD_LIBRARY_PATH=~/lib:$LD_LIBRARY_PATH

# Set up aliases
alias l='ls'
alias ll='ls -lh'
alias la='ls -a'
alias cs='cscope -R'
alias vi='nvim'
alias ssh-r='ssh -R 3128:localhost:3128'
alias hd='hexdump -C'
alias b=build-current-dir
alias ta=tmux-attach
alias tn=tmux-new
alias rs='rsync -a --info=progress2 --info=name0'
alias objd=objdump-platform

if [[ "$platform" == 'darwin' ]]; then
	alias ls='ls -G'
elif [[ "$platform" == 'linux' ]]; then
	alias ls='ls --color=auto'
fi

export CCACHE_CPP2=yes

# Make git tab completion faster, at the expense of being a bit less smart
__git_files () { 
    _wanted files expl 'local files' _files     
}

if [[ -e "$ZSH_LOCAL" ]]; then
    source "$ZSH_LOCAL"
fi

if [[ -n $TMUX ]]; then
    precmd() {tmux rename-window "$(hostname) - $(tmux display-message -p '#S')"}
else
    precmd() {echo -ne "\e]0; $(hostname) \007"}
fi

# Keep ctrl-D from closing shell
set -o ignoreeof

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
