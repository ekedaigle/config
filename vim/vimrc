filetype off

set runtimepath+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'benmills/vimux'
Plugin 'eakmeister/vim-gitmodeline'
Plugin 'derekwyatt/vim-fswitch'
Plugin 'google/yapf', { 'rtp': 'plugins/vim' }
Plugin 'honza/vim-snippets'
Plugin 'lervag/vim-latex'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'psf/black', { 'branch' : 'stable' }
Plugin 'junegunn/fzf', {'dir' : '~/config/fzf', 'do': './install --all'}
Plugin 'junegunn/fzf.vim'
Plugin 'kana/vim-fakeclip'
Plugin 'majutsushi/tagbar'
Plugin 'morhetz/gruvbox'
Plugin 'scrooloose/nerdcommenter'
Plugin 'sfiera/vim-emacsmodeline'
Plugin 'Shougo/deoplete.nvim', { 'do' : ':UpdateRemotePlugins' }
Plugin 'Shougo/vimproc.vim'
Plugin 'SirVer/ultisnips'
Plugin 'tell-k/vim-autopep8'
Plugin 'tpope/vim-obsession'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'vim-airline/vim-airline'
Plugin 'w0rp/ale'
Plugin 'wting/rust.vim'
Plugin 'rust-lang-nursery/rustfmt'
Plugin 'zchee/deoplete-clang'
Plugin 'zchee/deoplete-jedi'
Plugin 'llvm-syntax', {'pinned' : 1}
Plugin 'armasm', {'pinned' : 1}
Plugin 'objdump-syntax', {'pinned' : 1}

call vundle#end()
filetype plugin on

let g:python3_host_prog = '~/bin/python3'

set ruler
set number
set nohlsearch
set backspace=2
set guioptions-=T " turn the menu bar off
set scrolloff=3
set modeline

set splitbelow
set splitright

set exrc
set secure

set ignorecase
set smartcase

"set textwidth=100

" ============================= Swap files ===================================

set noswapfile
set nobackup
set nowritebackup

" ============================== wildmenu ====================================

set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc,*.pyo,*.so,*.sw*,__pycache__

" ============================= Indentation ==================================
set tabstop=4
set softtabstop=4
set shiftwidth=4
set autoindent
set expandtab
set smarttab

filetype indent on

" Don't set smart indent for python files
set smartindent
augroup FiletypeBindings
    au! FileType python setl nosmartindent
augroup END

" ============================= Colorscheme ==================================

syntax enable
set background=dark
colorscheme gruvbox

" ============================= Airline ======================================
let g:airline_section_x = '' " don't show filetype
let g:airline_section_y = '' " don't show file encoding
let g:airline_section_z = '%v : %l/%L'

let g:airline_section_warning = '%{airline#util#wrap(airline#extensions#ale#get_warning(),0)}'
let g:airline_section_error = '%{airline#util#wrap(airline#extensions#ale#get_error(),0)}'

let g:airline#extensions#ale#show_line_numbers = 0

let g:ale_linters = {'python' : ['flake8', 'mypy'], 'cpp' : ['clangd', 'clangcheck']}
let g:ale_cpp_clangcheck_options = '--extra-arg="-fno-color-diagnostics"'

let g:ale_virtualtext_cursor = 'current'
let g:ale_virtualtext_prefix = '%type%: '

" ============================= Cscope =======================================

set nocscopeverbose

" ============================ Fugitive ======================================
set tags^=./.git/tags

" ============================ Key bindings ==================================

let mapleader = "\<Space>"
imap jk <Esc>
imap kj <Esc>
vnoremap < <gv
vnoremap > >gv
nnoremap Y y$
nnoremap <leader>v :vs<CR>
nnoremap <leader>s :split<CR>
nnoremap <leader>a :A<CR>
nnoremap <leader>w :w<CR>
nnoremap <leader>o :Files<CR>
nnoremap <leader>u :Buffers<CR>
nnoremap <leader>c :ALELint<CR>
vmap <leader>y "+y
vmap <leader>d "+d
cmap w!! %!sudo tee > /dev/null %
nnoremap Q <Nop>

augroup FiletypeBindings
    autocmd FileType python call s:PythonFiletypeBindings()
    autocmd FileType c call s:CFiletypeBindings()
    autocmd FileType cpp call s:CFiletypeBindings()
augroup END

function s:PythonFiletypeBindings()
    nnoremap <leader>b :call PythonTogglePDB()<CR>
    nnoremap <leader>f :call yapf#YAPF()<CR>
    vnoremap <leader>f :'<,'>call yapf#YAPF()<CR>
endfunction

function s:CFiletypeBindings()
    map <leader>f :py3f ~/config/vim/clang-format.py<CR>
endfunction

function PythonTogglePDB()
    let breakpoint = 'import pdb; pdb.set_trace()'
    let line = substitute(getline('.'), '^\s*\(.\{-}\)\s*$', '\1', '')

    if line ==# breakpoint
        :d
    else
        ":normal Oimport pdb; pdb.set_trace()
        ":insert breakpoint
        call append(line('.')-1, breakpoint)
    endif
endfunction

" ============================= FSwitch ======================================
" map :A to :FSHere
command A FSHere

function! s:SetVariables(dst, locs)
    if !exists("b:fswitchdst")
        let b:fswitchdst = a:dst
    endif
    if !exists("b:fswitchlocs")
        let b:fswitchlocs = a:locs
    endif
endfunction

au BufEnter *.cu   call s:SetVariables('hpp,h', 'reg:/src/include/,reg:|src|include/**|,ifrel:|/src/|../include|')
au BufEnter *.cu   set filetype=cpp
au BufEnter *.hpp  call s:SetVariables('cpp,cu', 'reg:/include/src/,reg:/include.*/src/,ifrel:|/include/|../src|')

" ============================= Tag Bar ======================================

let g:tagbar_usearrows = 1
nnoremap <leader>l :TagbarToggle<CR>

" ================================ deoplete ==================================

let g:deoplete#enable_at_startup = 0
call deoplete#custom#option('sources', {'_': ['ale']})

autocmd InsertEnter * call deoplete#enable()

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ deoplete#manual_complete()
function! s:check_back_space() abort "{{{
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction"}}}

" ================================= LaTeX ====================================
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'

" ============================== LLVM Syntax =================================

augroup FiletypeBindings
    au! BufRead,BufNewFile *.ll     set filetype=llvm
augroup END

augroup FiletypeBindings
    au! BufRead,BufNewFile *.td     set filetype=tablegen
augroup END

" ============================== sessions ====================================

function s:SessionOnEnter()
    let l:pid = getpid()

    if system('uname -s') ==# "Darwin\n"
        let l:ppid = system('ps aux -o ppid | grep ' . l:pid .
                    \' | grep vim | rev | cut -d" " -f1 | rev')[0:-2]
    else
        let l:ppid = system('cut -f4 -d" " /proc/' . l:pid . '/stat')[0:-2]
    endif

    let g:vim_session_file = '.vim_session.' . l:ppid

    if argc() == 0 && filereadable(g:vim_session_file)
        echom 'Restoring session'
        exec ':source ' g:vim_session_file
    endif

    exec ':Obsession ' g:vim_session_file
    let g:detach_session = 0
endfunction

function s:SessionOnExit()
    if g:detach_session == 0
        :Obsession!
    endif
endfunction

function DetachSession()
    let g:detach_session = 1
    :qa
endfunction

augroup SessionBindings
    autocmd VimEnter * nested call s:SessionOnEnter()
    autocmd VimLeave * call s:SessionOnExit()
augroup END
nnoremap <leader>q :call DetachSession()<CR>

" ============================== UltiSnips ===================================

let g:UltiSnipsExpandTrigger='<c-s>'
let g:UltiSnipsJumpForwardTrigger='<c-j>'
let g:UltiSnipsJumpBackwardTrigger='<c-k>'
let g:UltiSnipsEditSplit='context'

" ============================== Markdown ====================================

function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
  let ft=toupper(a:filetype)
  let group='textGroup'.ft
  if exists('b:current_syntax')
    let s:current_syntax=b:current_syntax
    " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
    " do nothing if b:current_syntax is defined.
    unlet b:current_syntax
  endif
  execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
  try
    execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
  catch
  endtry
  if exists('s:current_syntax')
    let b:current_syntax=s:current_syntax
  else
    unlet b:current_syntax
  endif
  execute 'syntax region textSnip'.ft.'
  \ matchgroup='.a:textSnipHl.'
  \ keepend
  \ start="'.a:start.'" end="'.a:end.'"
  \ contains=@'.group
endfunction

" Go through the buffer, find any inline code blocks, and enable syntax
" highlinting for the languages found. Vim can't handle enabling it for all
" install languages, unfortunately (gave me an error last time I tried).
function MarkdownSyntaxHighlight()
    call map(filter(getline('1', '$'), 'v:val =~ "```.\\+"'),
                \ 'TextEnableCodeSnip(v:val[3:], v:val, "```", "Comment")')
endfunction

augroup Markdown
    autocmd FileType markdown call MarkdownSyntaxHighlight()
augroup END

" =========================== Persistent Undo ================================
let vimDir = '$HOME/.vim'

if stridx(&runtimepath, expand(vimDir)) == -1
  " vimDir is not on runtimepath, add it
  let &runtimepath.=','.vimDir
endif

" Keep undo history across sessions by storing it in a file
if has('persistent_undo')
    let myUndoDir = expand(vimDir . '/undodir')
    " Create dirs
    call system('mkdir ' . vimDir)
    call system('mkdir ' . myUndoDir)
    let &undodir = myUndoDir
    set undofile
endif

